@using FPOSMenuMaker.Services;
@using Future.Models;
@inject CurrentItemSelectionHandler _handler;

<div class="container" style="margin-top: .5em; width: fit-content; height: fit-content; margin: 1em; ">
    <div style="display:flex; justify-content: center; border-bottom: solid black .1em; padding: 0em 1em; width: fit-content">
        <h3 style="padding-top: .3em; ">Item Taxes</h3>
    </div>
    <div style="padding-left: .3em">
        @{
            @for (int i = 0; i < 8; i++)
            {
                var tax = taxInfo.Where(tax => tax.TaxIndex == i).FirstOrDefault();
                if (tax is not null)
                {
                    <ItemTaxInfoField TaxInfo=@tax SetTaxFlag=@SetTaxFlag IsSet=@IsTaxFlagSet(tax.TaxIndex)></ItemTaxInfoField>
                }
                else
                {
                    <div>
                        <span>i</span>
                    </div>
                }
            }
        }
       
    </div>
</div>

@code{

    [Parameter] public Func<bool> ShouldRender { get; set; } 

    private byte taxflags;
    private List<Tax> taxInfo;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        taxInfo = _handler.GetTaxInfo();
        taxflags = _handler.GetTaxFlags();
    }

    private void SetTaxFlag(short taxIndex)
    {
        taxflags = (byte)(taxflags ^ (1 << taxIndex));
        _handler.SetTaxFlags(taxflags);
    }

    private bool IsTaxFlagSet(short taxIndex)
    {
        var bit = (1 << taxIndex);
        return ((taxflags & bit) == bit);
    }
}